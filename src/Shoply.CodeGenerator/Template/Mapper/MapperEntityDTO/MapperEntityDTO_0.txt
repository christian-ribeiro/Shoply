    
        #region {{EntityName}}
        CreateMap<{{EntityName}}, {{EntityName}}DTO>()
            .ForMember(dest => dest.InternalPropertiesDTO, opt => opt.MapFrom(src => src))
            .ForMember(dest => dest.ExternalPropertiesDTO, opt => opt.MapFrom(src => src))
            .ForMember(dest => dest.AuxiliaryPropertiesDTO, opt => opt.MapFrom(src => src))
            .ConstructUsing((src, mapper) => new {{EntityName}}DTO
            {
                InternalPropertiesDTO = new InternalProperties{{EntityName}}DTO({{InternalProperties}}),
                ExternalPropertiesDTO = new ExternalProperties{{EntityName}}DTO({{ExternalProperties}}),
                AuxiliaryPropertiesDTO = new AuxiliaryProperties{{EntityName}}DTO()
            })
            .ReverseMap();
        
        CreateMap<{{EntityName}}, InternalProperties{{EntityName}}DTO>()
            .ConstructUsing(src => new InternalProperties{{EntityName}}DTO({{InternalProperties}}))
            .ReverseMap();
        
        CreateMap<{{EntityName}}, ExternalProperties{{EntityName}}DTO>()
            .ConstructUsing(src => new ExternalProperties{{EntityName}}DTO({{ExternalProperties}}))
            .ReverseMap();
        
        CreateMap<{{EntityName}}, AuxiliaryProperties{{EntityName}}DTO>()
            .ConstructUsing((src, mapper) => new AuxiliaryProperties{{EntityName}}DTO())
            .ReverseMap();
        #endregion